<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>AML.Engine.Services.TreeTraversal</name>
  </assembly>
  <members>
    <member name="T:Aml.Engine.Services.TreeTraversal.ITreeTraversalService">
      <summary>
                Service providing tree traversal algorithms for InternalElement Trees.
            </summary>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.ITreeTraversalService.BreathFirst(Aml.Engine.CAEX.InstanceHierarchyType,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A BreathFirst Traversal algorithm, which can be used to traverse an InstanceHierarchy tree
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InstanceHierarchy which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>orderedeEnumeration of all InternalElements in the tree.</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.ITreeTraversalService.BreathFirst(Aml.Engine.CAEX.InternalElementType,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A BreathFirst Traversal algorithm, which can be used to traverse an InternalElement tree
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InternalElement which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>ordered enumeration of all InternalElements in the tree.</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.ITreeTraversalService.DepthFirstPostOrder(Aml.Engine.CAEX.InstanceHierarchyType,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A DepthFirst (Post-Order) Traversal algorithm, which can be used to traverse an InstanceHierarchy tree in post
                order
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InstanceHierarchy which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>ordered enumeration of all InternalElements in the tree in post order.</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.ITreeTraversalService.DepthFirstPostOrder(Aml.Engine.CAEX.InternalElementType,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A DepthFirst (Post-Order) Traversal algorithm, which can be used to traverse an InternalElement tree in post order
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InternalElement which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>ordered enumeration of all InternalElements in the tree in post order.</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.ITreeTraversalService.DepthFirstPreOrder(Aml.Engine.CAEX.IInternalElementContainer,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A DepthFirst (Pre-Order) Traversal algorithm, which can be used to traverse an InstanceHierarchy tree in pre order
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InstanceHierarchy which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>ordered enumeration of all InternalElements in the tree in pre order.</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.ITreeTraversalService.DepthFirstPreOrder(Aml.Engine.CAEX.InternalElementType,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A DepthFirst (Pre-Order) Traversal algorithm, which can be used to traverse an InternalElement tree in pre order
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InternalElement which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>ordered enumeration of all InternalElements in the tree in pre order.</returns>
    </member>
    <member name="T:Aml.Engine.Services.TreeTraversal.TreeTraversalService">
      <summary>
                Service providing tree traversal algorithms for InternalElement Trees.
            </summary>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.TreeTraversalService.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Aml.Engine.Services.TreeTraversal.TreeTraversalService</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.TreeTraversalService.BreathFirst(Aml.Engine.CAEX.InstanceHierarchyType,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A BreathFirst Traversal algorithm, which can be used to traverse an InstanceHierarchy tree
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InstanceHierarchy which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>orderedeEnumeration of all InternalElements in the tree.</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.TreeTraversalService.BreathFirst(Aml.Engine.CAEX.InternalElementType,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A BreathFirst Traversal algorithm, which can be used to traverse an InternalElement tree
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InternalElement which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>ordered enumeration of all InternalElements in the tree.</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.TreeTraversalService.DepthFirstPostOrder(Aml.Engine.CAEX.InstanceHierarchyType,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A DepthFirst (Post-Order) Traversal algorithm, which can be used to traverse an InstanceHierarchy tree in post
                order
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InstanceHierarchy which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>ordered enumeration of all InternalElements in the tree in post order.</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.TreeTraversalService.DepthFirstPostOrder(Aml.Engine.CAEX.InternalElementType,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A DepthFirst (Post-Order) Traversal algorithm, which can be used to traverse an InternalElement tree in post order
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InternalElement which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>ordered enumeration of all InternalElements in the tree in post order.</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.TreeTraversalService.DepthFirstPreOrder(Aml.Engine.CAEX.IInternalElementContainer,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A DepthFirst (Pre-Order) Traversal algorithm, which can be used to traverse an InstanceHierarchy tree in pre order
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InstanceHierarchy which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>ordered enumeration of all InternalElements in the tree in pre order.</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.TreeTraversalService.DepthFirstPreOrder(Aml.Engine.CAEX.InternalElementType,System.Predicate{Aml.Engine.CAEX.InternalElementType})">
      <summary>
                A DepthFirst (Pre-Order) Traversal algorithm, which can be used to traverse an InternalElement tree in pre order
                via foreach (var item in collection){ ... }. A predicate can be specified to restrict the element selection.
            </summary>
      <param name="root">The root defines the InternalElement which is used as the starting point of the traversal.</param>
      <param name="condition">The selection predicate.</param>
      <returns>ordered enumeration of all InternalElements in the tree in pre order.</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.TreeTraversalService.Register">
      <summary>
                Registers a new instance of a TreeTraversalService with the <see cref="T:Aml.Engine.Services.ServiceLocator" /> of the AMLEngine.
            </summary>
      <returns>The service instance</returns>
    </member>
    <member name="M:Aml.Engine.Services.TreeTraversal.TreeTraversalService.UnRegister">
      <summary>
                Unregisters this service
            </summary>
    </member>
  </members>
</doc>